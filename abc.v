// -------------------------------------------------------------
//
// Module: abc
// Generated by MATLAB(R) 9.13 and Filter Design HDL Coder 3.1.12.
// Generated on: 2023-05-12 11:53:35
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: inter
// Name: abc
// DALUTPartition: [2; 2]
// TargetLanguage: Verilog
// TestBenchName: abc_tb
// TestBenchStimulus: step ramp chirp noise 
// GenerateHDLTestBench: off

// Filter Specifications:
//
// Sample Rate          : 96 kHz
// Response             : Lowpass
// Specification        : N,Fp,Fst,Ap
// Interpolation Factor : 2
// Multirate Type       : Interpolator
// Filter Order         : 3
// Passband Edge        : 15 kHz
// Stopband Edge        : 25 kHz
// Passband Ripple      : 0.01 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Distributed arithmetic (DA)
// Folding Factor        : 8
// LUT Address Width     : 2
// Total LUT Size (bits) : 136
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure      : Direct-Form FIR Polyphase Interpolator
// Interpolation Factor  : 2
// Polyphase Length      : 2
// Filter Length         : 4
// Stable                : Yes
// Linear Phase          : Yes (Type 2)
//
// Arithmetic            : fixed
// Numerator             : s16,15 -> [-1 1)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module abc
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [32:0] filter_out; //sfix33_En30
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: abc
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b0000000000101010; //sfix16_En15
  parameter signed [15:0] coeffphase1_2 = 16'b0111111111101000; //sfix16_En15
  parameter signed [15:0] coeffphase2_1 = 16'b0111111111101000; //sfix16_En15
  parameter signed [15:0] coeffphase2_2 = 16'b0000000000101010; //sfix16_En15

  // Signals
  wire signed [15:0] filter_in_cast; // sfix16_En15
  reg  [3:0] cur_count; // ufix4
  wire phase_15; // boolean
  wire phase_0; // boolean
  wire phase_8; // boolean
  wire cur_count1; // ufix1
  wire serialoutb1; // ufix1
  reg  signed [15:0] shiftreg; // sfix16_En15
  reg  delay_pipeline [0:15] ; // boolean
  wire [1:0] mem_addr; // ufix2
  reg  signed [16:0] memoutb1; // sfix17_En15
  reg  signed [33:0] acc_out; // sfix34_En30
  wire signed [33:0] memoutb1_cast; // sfix34_En30
  wire signed [33:0] add_sub_out; // sfix34_En30
  wire signed [33:0] acc_out_shft; // sfix34_En30
  wire signed [33:0] acc_in; // sfix34_En30
  wire signed [33:0] addsub_add; // sfix34_En30
  wire signed [33:0] addsub_sub; // sfix34_En30
  wire signed [33:0] add_signext; // sfix34_En30
  wire signed [33:0] add_signext_1; // sfix34_En30
  wire signed [34:0] add_temp; // sfix35_En30
  wire signed [33:0] sub_signext; // sfix34_En30
  wire signed [33:0] sub_signext_1; // sfix34_En30
  wire signed [34:0] sub_temp; // sfix35_En30
  wire signed [33:0] output_da; // sfix34_En30
  wire [1:0] mem_addr_1; // ufix2
  reg  signed [16:0] memoutb1_1; // sfix17_En15
  reg  signed [33:0] acc_out_1; // sfix34_En30
  wire signed [33:0] memoutb1_1_cast; // sfix34_En30
  wire signed [33:0] add_sub_out_1; // sfix34_En30
  wire signed [33:0] acc_out_shft_1; // sfix34_En30
  wire signed [33:0] acc_in_1; // sfix34_En30
  wire signed [33:0] addsub_add_1; // sfix34_En30
  wire signed [33:0] addsub_sub_1; // sfix34_En30
  wire signed [33:0] add_signext_2; // sfix34_En30
  wire signed [33:0] add_signext_3; // sfix34_En30
  wire signed [34:0] add_temp_1; // sfix35_En30
  wire signed [33:0] sub_signext_2; // sfix34_En30
  wire signed [33:0] sub_signext_3; // sfix34_En30
  wire signed [34:0] sub_temp_1; // sfix35_En30
  reg  signed [33:0] final_acc_out; // sfix34_En30
  wire signed [33:0] output_da_1; // sfix34_En30
  wire signed [32:0] output_cast_1; // sfix33_En30
  wire signed [32:0] output_cast_2; // sfix33_En30
  wire signed [32:0] output_mux; // sfix33_En30
  reg  signed [32:0] output_register; // sfix33_En30

  // Block Statements
  assign filter_in_cast = filter_in;

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 4'b1111;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 4'b1111) begin
            cur_count <= 4'b0000;
          end
          else begin
            cur_count <= cur_count + 4'b0001;
          end
        end
      end
    end // Counter_process

  assign  phase_15 = (cur_count == 4'b1111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 4'b0000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_8 = (((cur_count == 4'b0000) ||
                     (cur_count == 4'b1000)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign cur_count1 = {cur_count[3]};

  always @ (posedge clk or posedge reset)
    begin: Serializer_1_process
      if (reset == 1'b1) begin
        shiftreg <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (phase_15 == 1'b1) begin
            shiftreg <= filter_in_cast;
          end
          else begin
            shiftreg <= {1'b0, shiftreg[15 : 1]};
          end
        end
      end 
    end // Serializer_1_process;

  assign   serialoutb1=shiftreg[0];
 
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_1_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 1'b0;
        delay_pipeline[1] <= 1'b0;
        delay_pipeline[2] <= 1'b0;
        delay_pipeline[3] <= 1'b0;
        delay_pipeline[4] <= 1'b0;
        delay_pipeline[5] <= 1'b0;
        delay_pipeline[6] <= 1'b0;
        delay_pipeline[7] <= 1'b0;
        delay_pipeline[8] <= 1'b0;
        delay_pipeline[9] <= 1'b0;
        delay_pipeline[10] <= 1'b0;
        delay_pipeline[11] <= 1'b0;
        delay_pipeline[12] <= 1'b0;
        delay_pipeline[13] <= 1'b0;
        delay_pipeline[14] <= 1'b0;
        delay_pipeline[15] <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= serialoutb1;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
        end
      end
    end // Delay_Pipeline_1_process


  assign mem_addr = {delay_pipeline[15], serialoutb1};

  always @(mem_addr)
  begin
    case(mem_addr)
      2'b00 : memoutb1 = 17'b00000000000000000;
      2'b01 : memoutb1 = 17'b00000000000101010;
      2'b10 : memoutb1 = 17'b00111111111101000;
      2'b11 : memoutb1 = 17'b01000000000010010;
      default : memoutb1 = 17'b01000000000010010;
    endcase
  end

  assign memoutb1_cast = $signed({memoutb1[16:0], 15'b000000000000000});

  assign acc_out_shft = $signed({{1{acc_out[33]}}, acc_out[33:1]});

  assign add_signext = acc_out_shft;
  assign add_signext_1 = memoutb1_cast;
  assign add_temp = add_signext + add_signext_1;
  assign addsub_add = add_temp[33:0];

  assign sub_signext = acc_out_shft;
  assign sub_signext_1 = memoutb1_cast;
  assign sub_temp = sub_signext - sub_signext_1;
  assign addsub_sub = sub_temp[33:0];

  assign add_sub_out = (phase_15 == 1'b1) ? addsub_sub :
                      addsub_add;

  assign acc_in = (phase_0 == 1'b1) ? memoutb1_cast :
            add_sub_out;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_1_process
      if (reset == 1'b1) begin
        acc_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out <= acc_in;
        end
      end
    end // Acc_reg_1_process

  assign output_da = acc_out;

  assign mem_addr_1 = {delay_pipeline[15], serialoutb1};

  always @(mem_addr_1)
  begin
    case(mem_addr_1)
      2'b00 : memoutb1_1 = 17'b00000000000000000;
      2'b01 : memoutb1_1 = 17'b00111111111101000;
      2'b10 : memoutb1_1 = 17'b00000000000101010;
      2'b11 : memoutb1_1 = 17'b01000000000010010;
      default : memoutb1_1 = 17'b01000000000010010;
    endcase
  end

  assign memoutb1_1_cast = $signed({memoutb1_1[16:0], 15'b000000000000000});

  assign acc_out_shft_1 = $signed({{1{acc_out_1[33]}}, acc_out_1[33:1]});

  assign add_signext_2 = acc_out_shft_1;
  assign add_signext_3 = memoutb1_1_cast;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign addsub_add_1 = add_temp_1[33:0];

  assign sub_signext_2 = acc_out_shft_1;
  assign sub_signext_3 = memoutb1_1_cast;
  assign sub_temp_1 = sub_signext_2 - sub_signext_3;
  assign addsub_sub_1 = sub_temp_1[33:0];

  assign add_sub_out_1 = (phase_15 == 1'b1) ? addsub_sub_1 :
                        addsub_add_1;

  assign acc_in_1 = (phase_0 == 1'b1) ? memoutb1_1_cast :
              add_sub_out_1;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_2_process
      if (reset == 1'b1) begin
        acc_out_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_1 <= acc_in_1;
        end
      end
    end // Acc_reg_2_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_2_process
      if (reset == 1'b1) begin
        final_acc_out <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          final_acc_out <= acc_out_1;
        end
      end
    end // Finalsum_reg_2_process

  assign output_da_1 = final_acc_out;

  assign output_cast_1 = output_da[32:0];

  assign output_cast_2 = output_da_1[32:0];

  assign output_mux = (cur_count1 == 1'b0) ? output_cast_1 :
                     output_cast_2;
  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_8 == 1'b1) begin
          output_register <= output_mux;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign ce_out = phase_15;
  assign filter_out = output_register;
endmodule  // abc
