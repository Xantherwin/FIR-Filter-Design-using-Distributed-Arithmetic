// -------------------------------------------------------------
//
// Module: o10
// Generated by MATLAB(R) 9.13 and Filter Design HDL Coder 3.1.12.
// Generated on: 2023-05-12 11:59:39
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// TargetDirectory: order10
// Name: o10
// DALUTPartition: 6
// TargetLanguage: Verilog
// TestBenchName: o10_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 200 kHz
// Response        : Lowpass
// Specification   : N,Fp,Fst,Ap
// Filter Order    : 10
// Passband Edge   : 50 kHz
// Stopband Edge   : 100 kHz
// Passband Ripple : 0.01 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Distributed arithmetic (DA)
// Folding Factor        : 17
// LUT Address Width     : 6
// Total LUT Size (bits) : 1088
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form Symmetric FIR
// Filter Length     : 11
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s16,15 -> [-1 1)
// Filter Internals  : Full Precision
//   Output          : s32,30 -> [-2 2)  (auto determined)
//   Tap Sum         : s17,15 -> [-2 2)  (auto determined)
//   Product         : s32,30 -> [-2 2)  (auto determined)
//   Accumulator     : s32,30 -> [-2 2)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module o10
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [31:0] filter_out; //sfix32_En30

////////////////////////////////////////////////////////////////
//Module Architecture: o10
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000010011100; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b1111110011110101; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b0000100001100000; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b1111000000000100; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b0001011100000111; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0110011000010101; //sfix16_En15

  parameter const_zero = 1'b0; //ufix1
  // Signals
  wire signed [15:0] filter_in_cast; // sfix16_En15
  reg  [4:0] cur_count; // ufix5
  wire phase_16; // boolean
  wire phase_0; // boolean
  wire phase_16_1; // boolean
  wire serialoutb1; // ufix1
  reg  signed [15:0] shiftreg; // sfix16_En15
  reg  delay_pipeline [0:159] ; // boolean
  wire delayline_b15; // ufix1
  wire delayline_b31; // ufix1
  wire delayline_b47; // ufix1
  wire delayline_b63; // ufix1
  wire delayline_b79; // ufix1
  wire delayline_b95; // ufix1
  wire delayline_b111; // ufix1
  wire delayline_b127; // ufix1
  wire delayline_b143; // ufix1
  wire delayline_b159; // ufix1
  wire preaddbit1; // ufix1
  wire addcarry1; // ufix1
  wire carrymux1; // ufix1
  reg  carryreg1; // ufix1
  wire temp1; // ufix1
  wire temp2; // ufix1
  wire temp3; // ufix1
  wire preaddbit2; // ufix1
  wire addcarry2; // ufix1
  wire carrymux2; // ufix1
  reg  carryreg2; // ufix1
  wire temp1_1; // ufix1
  wire temp2_1; // ufix1
  wire temp3_1; // ufix1
  wire preaddbit3; // ufix1
  wire addcarry3; // ufix1
  wire carrymux3; // ufix1
  reg  carryreg3; // ufix1
  wire temp1_2; // ufix1
  wire temp2_2; // ufix1
  wire temp3_2; // ufix1
  wire preaddbit4; // ufix1
  wire addcarry4; // ufix1
  wire carrymux4; // ufix1
  reg  carryreg4; // ufix1
  wire temp1_3; // ufix1
  wire temp2_3; // ufix1
  wire temp3_3; // ufix1
  wire preaddbit5; // ufix1
  wire addcarry5; // ufix1
  wire carrymux5; // ufix1
  reg  carryreg5; // ufix1
  wire temp1_4; // ufix1
  wire temp2_4; // ufix1
  wire temp3_4; // ufix1
  wire [5:0] mem_addr; // ufix6
  reg  signed [16:0] memoutb1; // sfix17_En15
  reg  signed [33:0] acc_out; // sfix34_En31
  wire signed [33:0] memoutb1_cast; // sfix34_En31
  wire signed [33:0] add_sub_out; // sfix34_En31
  wire signed [33:0] acc_out_shft; // sfix34_En31
  wire signed [33:0] acc_in; // sfix34_En31
  wire signed [33:0] addsub_add; // sfix34_En31
  wire signed [33:0] addsub_sub; // sfix34_En31
  wire signed [33:0] add_signext; // sfix34_En31
  wire signed [33:0] add_signext_1; // sfix34_En31
  wire signed [34:0] add_temp; // sfix35_En31
  wire signed [33:0] sub_signext; // sfix34_En31
  wire signed [33:0] sub_signext_1; // sfix34_En31
  wire signed [34:0] sub_temp; // sfix35_En31
  reg  signed [33:0] final_acc_out; // sfix34_En31
  wire signed [33:0] output_da; // sfix34_En30
  wire signed [31:0] output_typeconvert; // sfix32_En30
  reg  signed [31:0] output_register; // sfix32_En30

  // Block Statements
  assign filter_in_cast = filter_in;

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 5'b10000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 5'b10000) begin
            cur_count <= 5'b00000;
          end
          else begin
            cur_count <= cur_count + 5'b00001;
          end
        end
      end
    end // Counter_process

  assign  phase_16 = (cur_count == 5'b10000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 5'b00000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_16_1 = (((cur_count == 5'b10000) ||
                        (cur_count == 5'b00000)  ||
                        (cur_count == 5'b00001)  ||
                        (cur_count == 5'b00010)  ||
                        (cur_count == 5'b00011)  ||
                        (cur_count == 5'b00100)  ||
                        (cur_count == 5'b00101)  ||
                        (cur_count == 5'b00110)  ||
                        (cur_count == 5'b00111)  ||
                        (cur_count == 5'b01000)  ||
                        (cur_count == 5'b01001)  ||
                        (cur_count == 5'b01010)  ||
                        (cur_count == 5'b01011)  ||
                        (cur_count == 5'b01100)  ||
                        (cur_count == 5'b01101)  ||
                        (cur_count == 5'b01110)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Serializer_1_process
      if (reset == 1'b1) begin
        shiftreg <= 16'b0000000000000000;
      end
      else begin
        if (phase_16_1 == 1'b1) begin
          if (phase_16 == 1'b1) begin
            shiftreg <= filter_in_cast;
          end
          else begin
            shiftreg <= {1'b0, shiftreg[15 : 1]};
          end
        end
      end 
    end // Serializer_1_process;

  assign   serialoutb1=shiftreg[0];
 
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_1_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 1'b0;
        delay_pipeline[1] <= 1'b0;
        delay_pipeline[2] <= 1'b0;
        delay_pipeline[3] <= 1'b0;
        delay_pipeline[4] <= 1'b0;
        delay_pipeline[5] <= 1'b0;
        delay_pipeline[6] <= 1'b0;
        delay_pipeline[7] <= 1'b0;
        delay_pipeline[8] <= 1'b0;
        delay_pipeline[9] <= 1'b0;
        delay_pipeline[10] <= 1'b0;
        delay_pipeline[11] <= 1'b0;
        delay_pipeline[12] <= 1'b0;
        delay_pipeline[13] <= 1'b0;
        delay_pipeline[14] <= 1'b0;
        delay_pipeline[15] <= 1'b0;
        delay_pipeline[16] <= 1'b0;
        delay_pipeline[17] <= 1'b0;
        delay_pipeline[18] <= 1'b0;
        delay_pipeline[19] <= 1'b0;
        delay_pipeline[20] <= 1'b0;
        delay_pipeline[21] <= 1'b0;
        delay_pipeline[22] <= 1'b0;
        delay_pipeline[23] <= 1'b0;
        delay_pipeline[24] <= 1'b0;
        delay_pipeline[25] <= 1'b0;
        delay_pipeline[26] <= 1'b0;
        delay_pipeline[27] <= 1'b0;
        delay_pipeline[28] <= 1'b0;
        delay_pipeline[29] <= 1'b0;
        delay_pipeline[30] <= 1'b0;
        delay_pipeline[31] <= 1'b0;
        delay_pipeline[32] <= 1'b0;
        delay_pipeline[33] <= 1'b0;
        delay_pipeline[34] <= 1'b0;
        delay_pipeline[35] <= 1'b0;
        delay_pipeline[36] <= 1'b0;
        delay_pipeline[37] <= 1'b0;
        delay_pipeline[38] <= 1'b0;
        delay_pipeline[39] <= 1'b0;
        delay_pipeline[40] <= 1'b0;
        delay_pipeline[41] <= 1'b0;
        delay_pipeline[42] <= 1'b0;
        delay_pipeline[43] <= 1'b0;
        delay_pipeline[44] <= 1'b0;
        delay_pipeline[45] <= 1'b0;
        delay_pipeline[46] <= 1'b0;
        delay_pipeline[47] <= 1'b0;
        delay_pipeline[48] <= 1'b0;
        delay_pipeline[49] <= 1'b0;
        delay_pipeline[50] <= 1'b0;
        delay_pipeline[51] <= 1'b0;
        delay_pipeline[52] <= 1'b0;
        delay_pipeline[53] <= 1'b0;
        delay_pipeline[54] <= 1'b0;
        delay_pipeline[55] <= 1'b0;
        delay_pipeline[56] <= 1'b0;
        delay_pipeline[57] <= 1'b0;
        delay_pipeline[58] <= 1'b0;
        delay_pipeline[59] <= 1'b0;
        delay_pipeline[60] <= 1'b0;
        delay_pipeline[61] <= 1'b0;
        delay_pipeline[62] <= 1'b0;
        delay_pipeline[63] <= 1'b0;
        delay_pipeline[64] <= 1'b0;
        delay_pipeline[65] <= 1'b0;
        delay_pipeline[66] <= 1'b0;
        delay_pipeline[67] <= 1'b0;
        delay_pipeline[68] <= 1'b0;
        delay_pipeline[69] <= 1'b0;
        delay_pipeline[70] <= 1'b0;
        delay_pipeline[71] <= 1'b0;
        delay_pipeline[72] <= 1'b0;
        delay_pipeline[73] <= 1'b0;
        delay_pipeline[74] <= 1'b0;
        delay_pipeline[75] <= 1'b0;
        delay_pipeline[76] <= 1'b0;
        delay_pipeline[77] <= 1'b0;
        delay_pipeline[78] <= 1'b0;
        delay_pipeline[79] <= 1'b0;
        delay_pipeline[80] <= 1'b0;
        delay_pipeline[81] <= 1'b0;
        delay_pipeline[82] <= 1'b0;
        delay_pipeline[83] <= 1'b0;
        delay_pipeline[84] <= 1'b0;
        delay_pipeline[85] <= 1'b0;
        delay_pipeline[86] <= 1'b0;
        delay_pipeline[87] <= 1'b0;
        delay_pipeline[88] <= 1'b0;
        delay_pipeline[89] <= 1'b0;
        delay_pipeline[90] <= 1'b0;
        delay_pipeline[91] <= 1'b0;
        delay_pipeline[92] <= 1'b0;
        delay_pipeline[93] <= 1'b0;
        delay_pipeline[94] <= 1'b0;
        delay_pipeline[95] <= 1'b0;
        delay_pipeline[96] <= 1'b0;
        delay_pipeline[97] <= 1'b0;
        delay_pipeline[98] <= 1'b0;
        delay_pipeline[99] <= 1'b0;
        delay_pipeline[100] <= 1'b0;
        delay_pipeline[101] <= 1'b0;
        delay_pipeline[102] <= 1'b0;
        delay_pipeline[103] <= 1'b0;
        delay_pipeline[104] <= 1'b0;
        delay_pipeline[105] <= 1'b0;
        delay_pipeline[106] <= 1'b0;
        delay_pipeline[107] <= 1'b0;
        delay_pipeline[108] <= 1'b0;
        delay_pipeline[109] <= 1'b0;
        delay_pipeline[110] <= 1'b0;
        delay_pipeline[111] <= 1'b0;
        delay_pipeline[112] <= 1'b0;
        delay_pipeline[113] <= 1'b0;
        delay_pipeline[114] <= 1'b0;
        delay_pipeline[115] <= 1'b0;
        delay_pipeline[116] <= 1'b0;
        delay_pipeline[117] <= 1'b0;
        delay_pipeline[118] <= 1'b0;
        delay_pipeline[119] <= 1'b0;
        delay_pipeline[120] <= 1'b0;
        delay_pipeline[121] <= 1'b0;
        delay_pipeline[122] <= 1'b0;
        delay_pipeline[123] <= 1'b0;
        delay_pipeline[124] <= 1'b0;
        delay_pipeline[125] <= 1'b0;
        delay_pipeline[126] <= 1'b0;
        delay_pipeline[127] <= 1'b0;
        delay_pipeline[128] <= 1'b0;
        delay_pipeline[129] <= 1'b0;
        delay_pipeline[130] <= 1'b0;
        delay_pipeline[131] <= 1'b0;
        delay_pipeline[132] <= 1'b0;
        delay_pipeline[133] <= 1'b0;
        delay_pipeline[134] <= 1'b0;
        delay_pipeline[135] <= 1'b0;
        delay_pipeline[136] <= 1'b0;
        delay_pipeline[137] <= 1'b0;
        delay_pipeline[138] <= 1'b0;
        delay_pipeline[139] <= 1'b0;
        delay_pipeline[140] <= 1'b0;
        delay_pipeline[141] <= 1'b0;
        delay_pipeline[142] <= 1'b0;
        delay_pipeline[143] <= 1'b0;
        delay_pipeline[144] <= 1'b0;
        delay_pipeline[145] <= 1'b0;
        delay_pipeline[146] <= 1'b0;
        delay_pipeline[147] <= 1'b0;
        delay_pipeline[148] <= 1'b0;
        delay_pipeline[149] <= 1'b0;
        delay_pipeline[150] <= 1'b0;
        delay_pipeline[151] <= 1'b0;
        delay_pipeline[152] <= 1'b0;
        delay_pipeline[153] <= 1'b0;
        delay_pipeline[154] <= 1'b0;
        delay_pipeline[155] <= 1'b0;
        delay_pipeline[156] <= 1'b0;
        delay_pipeline[157] <= 1'b0;
        delay_pipeline[158] <= 1'b0;
        delay_pipeline[159] <= 1'b0;
      end
      else begin
        if (phase_16_1 == 1'b1) begin
          delay_pipeline[0] <= serialoutb1;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
          delay_pipeline[67] <= delay_pipeline[66];
          delay_pipeline[68] <= delay_pipeline[67];
          delay_pipeline[69] <= delay_pipeline[68];
          delay_pipeline[70] <= delay_pipeline[69];
          delay_pipeline[71] <= delay_pipeline[70];
          delay_pipeline[72] <= delay_pipeline[71];
          delay_pipeline[73] <= delay_pipeline[72];
          delay_pipeline[74] <= delay_pipeline[73];
          delay_pipeline[75] <= delay_pipeline[74];
          delay_pipeline[76] <= delay_pipeline[75];
          delay_pipeline[77] <= delay_pipeline[76];
          delay_pipeline[78] <= delay_pipeline[77];
          delay_pipeline[79] <= delay_pipeline[78];
          delay_pipeline[80] <= delay_pipeline[79];
          delay_pipeline[81] <= delay_pipeline[80];
          delay_pipeline[82] <= delay_pipeline[81];
          delay_pipeline[83] <= delay_pipeline[82];
          delay_pipeline[84] <= delay_pipeline[83];
          delay_pipeline[85] <= delay_pipeline[84];
          delay_pipeline[86] <= delay_pipeline[85];
          delay_pipeline[87] <= delay_pipeline[86];
          delay_pipeline[88] <= delay_pipeline[87];
          delay_pipeline[89] <= delay_pipeline[88];
          delay_pipeline[90] <= delay_pipeline[89];
          delay_pipeline[91] <= delay_pipeline[90];
          delay_pipeline[92] <= delay_pipeline[91];
          delay_pipeline[93] <= delay_pipeline[92];
          delay_pipeline[94] <= delay_pipeline[93];
          delay_pipeline[95] <= delay_pipeline[94];
          delay_pipeline[96] <= delay_pipeline[95];
          delay_pipeline[97] <= delay_pipeline[96];
          delay_pipeline[98] <= delay_pipeline[97];
          delay_pipeline[99] <= delay_pipeline[98];
          delay_pipeline[100] <= delay_pipeline[99];
          delay_pipeline[101] <= delay_pipeline[100];
          delay_pipeline[102] <= delay_pipeline[101];
          delay_pipeline[103] <= delay_pipeline[102];
          delay_pipeline[104] <= delay_pipeline[103];
          delay_pipeline[105] <= delay_pipeline[104];
          delay_pipeline[106] <= delay_pipeline[105];
          delay_pipeline[107] <= delay_pipeline[106];
          delay_pipeline[108] <= delay_pipeline[107];
          delay_pipeline[109] <= delay_pipeline[108];
          delay_pipeline[110] <= delay_pipeline[109];
          delay_pipeline[111] <= delay_pipeline[110];
          delay_pipeline[112] <= delay_pipeline[111];
          delay_pipeline[113] <= delay_pipeline[112];
          delay_pipeline[114] <= delay_pipeline[113];
          delay_pipeline[115] <= delay_pipeline[114];
          delay_pipeline[116] <= delay_pipeline[115];
          delay_pipeline[117] <= delay_pipeline[116];
          delay_pipeline[118] <= delay_pipeline[117];
          delay_pipeline[119] <= delay_pipeline[118];
          delay_pipeline[120] <= delay_pipeline[119];
          delay_pipeline[121] <= delay_pipeline[120];
          delay_pipeline[122] <= delay_pipeline[121];
          delay_pipeline[123] <= delay_pipeline[122];
          delay_pipeline[124] <= delay_pipeline[123];
          delay_pipeline[125] <= delay_pipeline[124];
          delay_pipeline[126] <= delay_pipeline[125];
          delay_pipeline[127] <= delay_pipeline[126];
          delay_pipeline[128] <= delay_pipeline[127];
          delay_pipeline[129] <= delay_pipeline[128];
          delay_pipeline[130] <= delay_pipeline[129];
          delay_pipeline[131] <= delay_pipeline[130];
          delay_pipeline[132] <= delay_pipeline[131];
          delay_pipeline[133] <= delay_pipeline[132];
          delay_pipeline[134] <= delay_pipeline[133];
          delay_pipeline[135] <= delay_pipeline[134];
          delay_pipeline[136] <= delay_pipeline[135];
          delay_pipeline[137] <= delay_pipeline[136];
          delay_pipeline[138] <= delay_pipeline[137];
          delay_pipeline[139] <= delay_pipeline[138];
          delay_pipeline[140] <= delay_pipeline[139];
          delay_pipeline[141] <= delay_pipeline[140];
          delay_pipeline[142] <= delay_pipeline[141];
          delay_pipeline[143] <= delay_pipeline[142];
          delay_pipeline[144] <= delay_pipeline[143];
          delay_pipeline[145] <= delay_pipeline[144];
          delay_pipeline[146] <= delay_pipeline[145];
          delay_pipeline[147] <= delay_pipeline[146];
          delay_pipeline[148] <= delay_pipeline[147];
          delay_pipeline[149] <= delay_pipeline[148];
          delay_pipeline[150] <= delay_pipeline[149];
          delay_pipeline[151] <= delay_pipeline[150];
          delay_pipeline[152] <= delay_pipeline[151];
          delay_pipeline[153] <= delay_pipeline[152];
          delay_pipeline[154] <= delay_pipeline[153];
          delay_pipeline[155] <= delay_pipeline[154];
          delay_pipeline[156] <= delay_pipeline[155];
          delay_pipeline[157] <= delay_pipeline[156];
          delay_pipeline[158] <= delay_pipeline[157];
          delay_pipeline[159] <= delay_pipeline[158];
        end
      end
    end // Delay_Pipeline_1_process


  assign delayline_b15 = {delay_pipeline[15]};

  assign delayline_b31 = {delay_pipeline[31]};

  assign delayline_b47 = {delay_pipeline[47]};

  assign delayline_b63 = {delay_pipeline[63]};

  assign delayline_b79 = {delay_pipeline[79]};

  assign delayline_b95 = {delay_pipeline[95]};

  assign delayline_b111 = {delay_pipeline[111]};

  assign delayline_b127 = {delay_pipeline[127]};

  assign delayline_b143 = {delay_pipeline[143]};

  assign delayline_b159 = {delay_pipeline[159]};

  assign preaddbit1 =  serialoutb1 ^ delayline_b159 ^ carrymux1;

  assign temp1 =  serialoutb1 & delayline_b159;

  assign temp2 =  delayline_b159 & carrymux1;

  assign temp3 =  serialoutb1 & carrymux1;

  assign addcarry1 =  temp1 | temp2 | temp3;

  assign carrymux1 = (phase_0 == 1'b1) ? const_zero :
               carryreg1;
  always @ (posedge clk or posedge reset)
    begin: Carry_reg1_process
      if (reset == 1'b1) begin
        carryreg1 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          carryreg1 <= addcarry1;
        end
      end
    end // Carry_reg1_process

  assign preaddbit2 =  delayline_b15 ^ delayline_b143 ^ carrymux2;

  assign temp1_1 =  delayline_b15 & delayline_b143;

  assign temp2_1 =  delayline_b143 & carrymux2;

  assign temp3_1 =  delayline_b15 & carrymux2;

  assign addcarry2 =  temp1_1 | temp2_1 | temp3_1;

  assign carrymux2 = (phase_0 == 1'b1) ? const_zero :
               carryreg2;
  always @ (posedge clk or posedge reset)
    begin: Carry_reg2_process
      if (reset == 1'b1) begin
        carryreg2 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          carryreg2 <= addcarry2;
        end
      end
    end // Carry_reg2_process

  assign preaddbit3 =  delayline_b31 ^ delayline_b127 ^ carrymux3;

  assign temp1_2 =  delayline_b31 & delayline_b127;

  assign temp2_2 =  delayline_b127 & carrymux3;

  assign temp3_2 =  delayline_b31 & carrymux3;

  assign addcarry3 =  temp1_2 | temp2_2 | temp3_2;

  assign carrymux3 = (phase_0 == 1'b1) ? const_zero :
               carryreg3;
  always @ (posedge clk or posedge reset)
    begin: Carry_reg3_process
      if (reset == 1'b1) begin
        carryreg3 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          carryreg3 <= addcarry3;
        end
      end
    end // Carry_reg3_process

  assign preaddbit4 =  delayline_b47 ^ delayline_b111 ^ carrymux4;

  assign temp1_3 =  delayline_b47 & delayline_b111;

  assign temp2_3 =  delayline_b111 & carrymux4;

  assign temp3_3 =  delayline_b47 & carrymux4;

  assign addcarry4 =  temp1_3 | temp2_3 | temp3_3;

  assign carrymux4 = (phase_0 == 1'b1) ? const_zero :
               carryreg4;
  always @ (posedge clk or posedge reset)
    begin: Carry_reg4_process
      if (reset == 1'b1) begin
        carryreg4 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          carryreg4 <= addcarry4;
        end
      end
    end // Carry_reg4_process

  assign preaddbit5 =  delayline_b63 ^ delayline_b95 ^ carrymux5;

  assign temp1_4 =  delayline_b63 & delayline_b95;

  assign temp2_4 =  delayline_b95 & carrymux5;

  assign temp3_4 =  delayline_b63 & carrymux5;

  assign addcarry5 =  temp1_4 | temp2_4 | temp3_4;

  assign carrymux5 = (phase_0 == 1'b1) ? const_zero :
               carryreg5;
  always @ (posedge clk or posedge reset)
    begin: Carry_reg5_process
      if (reset == 1'b1) begin
        carryreg5 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          carryreg5 <= addcarry5;
        end
      end
    end // Carry_reg5_process

  assign mem_addr = {delayline_b79, preaddbit5, preaddbit4, preaddbit3, preaddbit2, preaddbit1};

  always @(mem_addr)
  begin
    case(mem_addr)
      6'b000000 : memoutb1 = 17'b00000000000000000;
      6'b000001 : memoutb1 = 17'b00000000010011100;
      6'b000010 : memoutb1 = 17'b11111110011110101;
      6'b000011 : memoutb1 = 17'b11111110110010001;
      6'b000100 : memoutb1 = 17'b00000100001100000;
      6'b000101 : memoutb1 = 17'b00000100011111100;
      6'b000110 : memoutb1 = 17'b00000010101010101;
      6'b000111 : memoutb1 = 17'b00000010111110001;
      6'b001000 : memoutb1 = 17'b11111000000000100;
      6'b001001 : memoutb1 = 17'b11111000010100000;
      6'b001010 : memoutb1 = 17'b11110110011111001;
      6'b001011 : memoutb1 = 17'b11110110110010101;
      6'b001100 : memoutb1 = 17'b11111100001100100;
      6'b001101 : memoutb1 = 17'b11111100100000000;
      6'b001110 : memoutb1 = 17'b11111010101011001;
      6'b001111 : memoutb1 = 17'b11111010111110101;
      6'b010000 : memoutb1 = 17'b00001011100000111;
      6'b010001 : memoutb1 = 17'b00001011110100011;
      6'b010010 : memoutb1 = 17'b00001001111111100;
      6'b010011 : memoutb1 = 17'b00001010010011000;
      6'b010100 : memoutb1 = 17'b00001111101100111;
      6'b010101 : memoutb1 = 17'b00010000000000011;
      6'b010110 : memoutb1 = 17'b00001110001011100;
      6'b010111 : memoutb1 = 17'b00001110011111000;
      6'b011000 : memoutb1 = 17'b00000011100001011;
      6'b011001 : memoutb1 = 17'b00000011110100111;
      6'b011010 : memoutb1 = 17'b00000010000000000;
      6'b011011 : memoutb1 = 17'b00000010010011100;
      6'b011100 : memoutb1 = 17'b00000111101101011;
      6'b011101 : memoutb1 = 17'b00001000000000111;
      6'b011110 : memoutb1 = 17'b00000110001100000;
      6'b011111 : memoutb1 = 17'b00000110011111100;
      6'b100000 : memoutb1 = 17'b00110011000010101;
      6'b100001 : memoutb1 = 17'b00110011010110001;
      6'b100010 : memoutb1 = 17'b00110001100001010;
      6'b100011 : memoutb1 = 17'b00110001110100110;
      6'b100100 : memoutb1 = 17'b00110111001110101;
      6'b100101 : memoutb1 = 17'b00110111100010001;
      6'b100110 : memoutb1 = 17'b00110101101101010;
      6'b100111 : memoutb1 = 17'b00110110000000110;
      6'b101000 : memoutb1 = 17'b00101011000011001;
      6'b101001 : memoutb1 = 17'b00101011010110101;
      6'b101010 : memoutb1 = 17'b00101001100001110;
      6'b101011 : memoutb1 = 17'b00101001110101010;
      6'b101100 : memoutb1 = 17'b00101111001111001;
      6'b101101 : memoutb1 = 17'b00101111100010101;
      6'b101110 : memoutb1 = 17'b00101101101101110;
      6'b101111 : memoutb1 = 17'b00101110000001010;
      6'b110000 : memoutb1 = 17'b00111110100011100;
      6'b110001 : memoutb1 = 17'b00111110110111000;
      6'b110010 : memoutb1 = 17'b00111101000010001;
      6'b110011 : memoutb1 = 17'b00111101010101101;
      6'b110100 : memoutb1 = 17'b01000010101111100;
      6'b110101 : memoutb1 = 17'b01000011000011000;
      6'b110110 : memoutb1 = 17'b01000001001110001;
      6'b110111 : memoutb1 = 17'b01000001100001101;
      6'b111000 : memoutb1 = 17'b00110110100100000;
      6'b111001 : memoutb1 = 17'b00110110110111100;
      6'b111010 : memoutb1 = 17'b00110101000010101;
      6'b111011 : memoutb1 = 17'b00110101010110001;
      6'b111100 : memoutb1 = 17'b00111010110000000;
      6'b111101 : memoutb1 = 17'b00111011000011100;
      6'b111110 : memoutb1 = 17'b00111001001110101;
      6'b111111 : memoutb1 = 17'b00111001100010001;
      default : memoutb1 = 17'b00111001100010001;
    endcase
  end

  //  Shift and add the LUT results to compute the scaled accumulated sum

  assign memoutb1_cast = $signed({memoutb1[16:0], 16'b0000000000000000});

  assign acc_out_shft = $signed({{1{acc_out[33]}}, acc_out[33:1]});

  assign add_signext = acc_out_shft;
  assign add_signext_1 = memoutb1_cast;
  assign add_temp = add_signext + add_signext_1;
  assign addsub_add = add_temp[33:0];

  assign sub_signext = acc_out_shft;
  assign sub_signext_1 = memoutb1_cast;
  assign sub_temp = sub_signext - sub_signext_1;
  assign addsub_sub = sub_temp[33:0];

  assign add_sub_out = (phase_16 == 1'b1) ? addsub_sub :
                      addsub_add;

  assign acc_in = (phase_0 == 1'b1) ? memoutb1_cast :
            add_sub_out;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        acc_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out <= acc_in;
        end
      end
    end // Acc_reg_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        final_acc_out <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          final_acc_out <= acc_out;
        end
      end
    end // Finalsum_reg_process

  assign output_da = final_acc_out;

  assign output_typeconvert = output_da[31:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_16 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // o10
