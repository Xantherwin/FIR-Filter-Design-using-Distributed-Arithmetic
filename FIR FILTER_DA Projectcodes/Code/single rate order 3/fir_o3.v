// -------------------------------------------------------------
//
// Module: fir_o3
// Generated by MATLAB(R) 9.13 and Filter Design HDL Coder 3.1.12.
// Generated on: 2023-05-04 19:40:02
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: C:\Users\Mayank\Documents\MATLAB\Examples\R2022b\hdlfilter\FDHDLToolExample
// Name: fir_o3
// DALUTPartition: 2
// TargetLanguage: Verilog
// TestBenchName: fir_o3_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 96 kHz
// Response        : Lowpass
// Specification   : N,Fp,Fst,Ap
// Passband Ripple : 0.01 dB
// Stopband Edge   : 24 kHz
// Filter Order    : 3
// Passband Edge   : 20 kHz
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Distributed arithmetic (DA)
// Folding Factor        : 17
// LUT Address Width     : 2
// Total LUT Size (bits) : 68
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form Symmetric FIR
// Filter Length     : 4
// Stable            : Yes
// Linear Phase      : Yes (Type 2)
// Arithmetic        : fixed
// Numerator         : s16,16 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module fir_o3
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [33:0] filter_out; //sfix34_En31

////////////////////////////////////////////////////////////////
//Module Architecture: fir_o3
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000000011001; //sfix16_En16
  parameter signed [15:0] coeff2 = 16'b0111111111111001; //sfix16_En16

  parameter const_zero = 1'b0; //ufix1
  // Signals
  wire signed [15:0] filter_in_cast; // sfix16_En15
  reg  [4:0] cur_count; // ufix5
  wire phase_16; // boolean
  wire phase_0; // boolean
  wire phase_16_1; // boolean
  wire serialoutb1; // ufix1
  reg  signed [15:0] shiftreg; // sfix16_En15
  reg  delay_pipeline [0:47] ; // boolean
  wire delayline_b15; // ufix1
  wire delayline_b31; // ufix1
  wire delayline_b47; // ufix1
  wire preaddbit1; // ufix1
  wire addcarry1; // ufix1
  wire carrymux1; // ufix1
  reg  carryreg1; // ufix1
  wire temp1; // ufix1
  wire temp2; // ufix1
  wire temp3; // ufix1
  wire preaddbit2; // ufix1
  wire addcarry2; // ufix1
  wire carrymux2; // ufix1
  reg  carryreg2; // ufix1
  wire temp1_1; // ufix1
  wire temp2_1; // ufix1
  wire temp3_1; // ufix1
  wire [1:0] mem_addr; // ufix2
  reg  signed [16:0] memoutb1; // sfix17_En16
  reg  signed [34:0] acc_out; // sfix35_En32
  wire signed [34:0] memoutb1_cast; // sfix35_En32
  wire signed [34:0] add_sub_out; // sfix35_En32
  wire signed [34:0] acc_out_shft; // sfix35_En32
  wire signed [34:0] acc_in; // sfix35_En32
  wire signed [34:0] addsub_add; // sfix35_En32
  wire signed [34:0] addsub_sub; // sfix35_En32
  wire signed [34:0] add_signext; // sfix35_En32
  wire signed [34:0] add_signext_1; // sfix35_En32
  wire signed [35:0] add_temp; // sfix36_En32
  wire signed [34:0] sub_signext; // sfix35_En32
  wire signed [34:0] sub_signext_1; // sfix35_En32
  wire signed [35:0] sub_temp; // sfix36_En32
  reg  signed [34:0] final_acc_out; // sfix35_En32
  wire signed [34:0] output_da; // sfix35_En31
  wire signed [33:0] output_typeconvert; // sfix34_En31
  reg  signed [33:0] output_register; // sfix34_En31

  // Block Statements
  assign filter_in_cast = filter_in;

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 5'b10000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 5'b10000) begin
            cur_count <= 5'b00000;
          end
          else begin
            cur_count <= cur_count + 5'b00001;
          end
        end
      end
    end // Counter_process

  assign  phase_16 = (cur_count == 5'b10000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 5'b00000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_16_1 = (((cur_count == 5'b10000) ||
                        (cur_count == 5'b00000)  ||
                        (cur_count == 5'b00001)  ||
                        (cur_count == 5'b00010)  ||
                        (cur_count == 5'b00011)  ||
                        (cur_count == 5'b00100)  ||
                        (cur_count == 5'b00101)  ||
                        (cur_count == 5'b00110)  ||
                        (cur_count == 5'b00111)  ||
                        (cur_count == 5'b01000)  ||
                        (cur_count == 5'b01001)  ||
                        (cur_count == 5'b01010)  ||
                        (cur_count == 5'b01011)  ||
                        (cur_count == 5'b01100)  ||
                        (cur_count == 5'b01101)  ||
                        (cur_count == 5'b01110)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Serializer_1_process
      if (reset == 1'b1) begin
        shiftreg <= 16'b0000000000000000;
      end
      else begin
        if (phase_16_1 == 1'b1) begin
          if (phase_16 == 1'b1) begin
            shiftreg <= filter_in_cast;
          end
          else begin
            shiftreg <= {1'b0, shiftreg[15 : 1]};
          end
        end
      end 
    end // Serializer_1_process;

  assign   serialoutb1=shiftreg[0];
 
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_1_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 1'b0;
        delay_pipeline[1] <= 1'b0;
        delay_pipeline[2] <= 1'b0;
        delay_pipeline[3] <= 1'b0;
        delay_pipeline[4] <= 1'b0;
        delay_pipeline[5] <= 1'b0;
        delay_pipeline[6] <= 1'b0;
        delay_pipeline[7] <= 1'b0;
        delay_pipeline[8] <= 1'b0;
        delay_pipeline[9] <= 1'b0;
        delay_pipeline[10] <= 1'b0;
        delay_pipeline[11] <= 1'b0;
        delay_pipeline[12] <= 1'b0;
        delay_pipeline[13] <= 1'b0;
        delay_pipeline[14] <= 1'b0;
        delay_pipeline[15] <= 1'b0;
        delay_pipeline[16] <= 1'b0;
        delay_pipeline[17] <= 1'b0;
        delay_pipeline[18] <= 1'b0;
        delay_pipeline[19] <= 1'b0;
        delay_pipeline[20] <= 1'b0;
        delay_pipeline[21] <= 1'b0;
        delay_pipeline[22] <= 1'b0;
        delay_pipeline[23] <= 1'b0;
        delay_pipeline[24] <= 1'b0;
        delay_pipeline[25] <= 1'b0;
        delay_pipeline[26] <= 1'b0;
        delay_pipeline[27] <= 1'b0;
        delay_pipeline[28] <= 1'b0;
        delay_pipeline[29] <= 1'b0;
        delay_pipeline[30] <= 1'b0;
        delay_pipeline[31] <= 1'b0;
        delay_pipeline[32] <= 1'b0;
        delay_pipeline[33] <= 1'b0;
        delay_pipeline[34] <= 1'b0;
        delay_pipeline[35] <= 1'b0;
        delay_pipeline[36] <= 1'b0;
        delay_pipeline[37] <= 1'b0;
        delay_pipeline[38] <= 1'b0;
        delay_pipeline[39] <= 1'b0;
        delay_pipeline[40] <= 1'b0;
        delay_pipeline[41] <= 1'b0;
        delay_pipeline[42] <= 1'b0;
        delay_pipeline[43] <= 1'b0;
        delay_pipeline[44] <= 1'b0;
        delay_pipeline[45] <= 1'b0;
        delay_pipeline[46] <= 1'b0;
        delay_pipeline[47] <= 1'b0;
      end
      else begin
        if (phase_16_1 == 1'b1) begin
          delay_pipeline[0] <= serialoutb1;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
        end
      end
    end // Delay_Pipeline_1_process


  assign delayline_b15 = {delay_pipeline[15]};

  assign delayline_b31 = {delay_pipeline[31]};

  assign delayline_b47 = {delay_pipeline[47]};

  assign preaddbit1 =  serialoutb1 ^ delayline_b47 ^ carrymux1;

  assign temp1 =  serialoutb1 & delayline_b47;

  assign temp2 =  delayline_b47 & carrymux1;

  assign temp3 =  serialoutb1 & carrymux1;

  assign addcarry1 =  temp1 | temp2 | temp3;

  assign carrymux1 = (phase_0 == 1'b1) ? const_zero :
               carryreg1;
  always @ (posedge clk or posedge reset)
    begin: Carry_reg1_process
      if (reset == 1'b1) begin
        carryreg1 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          carryreg1 <= addcarry1;
        end
      end
    end // Carry_reg1_process

  assign preaddbit2 =  delayline_b15 ^ delayline_b31 ^ carrymux2;

  assign temp1_1 =  delayline_b15 & delayline_b31;

  assign temp2_1 =  delayline_b31 & carrymux2;

  assign temp3_1 =  delayline_b15 & carrymux2;

  assign addcarry2 =  temp1_1 | temp2_1 | temp3_1;

  assign carrymux2 = (phase_0 == 1'b1) ? const_zero :
               carryreg2;
  always @ (posedge clk or posedge reset)
    begin: Carry_reg2_process
      if (reset == 1'b1) begin
        carryreg2 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          carryreg2 <= addcarry2;
        end
      end
    end // Carry_reg2_process

  assign mem_addr = {preaddbit2, preaddbit1};

  always @(mem_addr)
  begin
    case(mem_addr)
      2'b00 : memoutb1 = 17'b00000000000000000;
      2'b01 : memoutb1 = 17'b00000000000011001;
      2'b10 : memoutb1 = 17'b00111111111111001;
      2'b11 : memoutb1 = 17'b01000000000010010;
      default : memoutb1 = 17'b01000000000010010;
    endcase
  end

  //  Shift and add the LUT results to compute the scaled accumulated sum

  assign memoutb1_cast = $signed({memoutb1[16:0], 16'b0000000000000000});

  assign acc_out_shft = $signed({{1{acc_out[34]}}, acc_out[34:1]});

  assign add_signext = acc_out_shft;
  assign add_signext_1 = memoutb1_cast;
  assign add_temp = add_signext + add_signext_1;
  assign addsub_add = add_temp[34:0];

  assign sub_signext = acc_out_shft;
  assign sub_signext_1 = memoutb1_cast;
  assign sub_temp = sub_signext - sub_signext_1;
  assign addsub_sub = sub_temp[34:0];

  assign add_sub_out = (phase_16 == 1'b1) ? addsub_sub :
                      addsub_add;

  assign acc_in = (phase_0 == 1'b1) ? memoutb1_cast :
            add_sub_out;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        acc_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out <= acc_in;
        end
      end
    end // Acc_reg_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        final_acc_out <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          final_acc_out <= acc_out;
        end
      end
    end // Finalsum_reg_process

  assign output_da = final_acc_out;

  assign output_typeconvert = output_da[33:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_16 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_o3
